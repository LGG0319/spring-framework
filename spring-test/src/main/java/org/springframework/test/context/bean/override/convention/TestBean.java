/*
 * Copyright 2002-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.test.context.bean.override.convention;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.test.context.bean.override.BeanOverride;

/**
 * Mark a field to override a bean instance in the {@code BeanFactory}.
 *
 * <p>The instance is created from a no-arg static method in the declaring
 * class whose return type is compatible with the annotated field. The method
 * is deduced as follows:
 * <ul>
 * <li>if the {@link #methodName()} is specified, look for a static method with
 * that name.</li>
 * <li>if not, look for exactly one static method named with a suffix equal to
 * {@value #CONVENTION_SUFFIX} and either starting with the annotated field
 * name, or starting with the bean name.</li>
 * </ul>
 *
 * <p>Consider the following example:
 *
 * <pre><code>
 * class CustomerServiceTests {
 *
 *     &#064;TestBean
 *     private CustomerRepository repository;
 *
 *     // Tests
 *
 *     private static CustomerRepository repositoryTestOverride() {
 *         return new TestCustomerRepository();
 *     }
 * }</code></pre>
 *
 * <p>In the example above, the {@code repository} bean is replaced by the
 * instance generated by the {@code repositoryTestOverride} method. Not only
 * the overridden instance is injected in the {@code repository} field, but it
 * is also replaced in the {@code BeanFactory} so that other injection points
 * for that bean use the override.
 *
 * <p>To make things more explicit, the method name can be set, as shown in the
 * following example:
 *
 * <pre><code>
 * class CustomerServiceTests {
 *
 *     &#064;TestBean(methodName = "createTestCustomerRepository")
 *     private CustomerRepository repository;
 *
 *     // Tests
 *
 *     private static CustomerRepository createTestCustomerRepository() {
 *         return new TestCustomerRepository();
 *     }
 * }</code></pre>
 *
 * <p>By default, the name of the bean is inferred from the name of the annotated
 * field. To use a different bean name, set the {@link #name()} property.
 *
 * @author Simon Basl√©
 * @author Stephane Nicoll
 * @since 6.2
 * @see TestBeanOverrideProcessor
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@BeanOverride(TestBeanOverrideProcessor.class)
public @interface TestBean {

	/**
	 * Required suffix for a method that overrides a bean instance that is
	 * detected by convention.
	 */
	String CONVENTION_SUFFIX = "TestOverride";

	/**
	 * Name of a static method to look for in the test, which will be used to
	 * instantiate the bean to override.
	 * <p>Default to {@code ""} (the empty String), which detects the method
	 * to us by convention.
	 */
	String methodName() default "";

	/**
	 * Name of the bean to override.
	 * <p>Default to {@code ""} (the empty String) to use the name of the
	 * annotated field.
	 */
	String name() default "";

}
